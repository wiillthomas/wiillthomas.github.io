{"version":3,"sources":["App.js","algos/bubbleSort.js","algos/insertionSort.js","algos/quickSort.js","index.js"],"names":["App","useState","Array","array","setArray","colorArray","setColorArray","randomiseArray","newArray","i","length","push","Math","floor","random","useEffect","className","onClick","map","element","id","onMouseMove","e","buttons","pagePosition","clientY","target","offsetTop","graphPosition","abs","mutatedArray","handleDraw","key","style","height","background","complete","arrayLength","setInterval","clearInterval","setTimeout","tmpColorArray","tmp","bubbleSort","arr","arrayAnimation","colorArrayAnimations","j","insertionSort","quickSort","left","right","swap","temp","pivot","partitionIndex","pivotValue","partition","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.903a1910.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { bubbleSort, quickSort, insertionSort } from \"./algos/index\"\nimport \"./App.css\";\n\n\nfunction App() {\n  const [array, setArray] = useState(Array(100));\n  const [colorArray, setColorArray] = useState(Array(100));\n\n  useEffect(() => {\n    randomiseArray();\n  }, []);\n\n  function randomiseArray() {\n    setColorArray([])\n    let newArray = [];\n    for (let i = 0; i < array.length; i += 1) {\n      newArray.push(Math.floor(Math.random() * 100));\n    }\n    setArray(newArray);\n  }\n\n  function handleDraw(e, id) {\n    if (e.buttons == 1 || e.buttons == 3 ) {\n      setColorArray([])\n      let pagePosition = e.clientY - e.target.offsetTop;\n      let graphPosition = Math.abs((pagePosition - 399) / 2);\n      let mutatedArray = array;\n      mutatedArray[id] = graphPosition;\n      setArray([...mutatedArray]);\n    }\n  }\n\n  return (\n    <div className=\"app__wrapper\">\n      <div className=\"header\">\n        <h2>Sorting Algo Visualiser</h2>\n        <h3>Will Thomas</h3>\n        <button className=\"button-primary\" onClick={() => randomiseArray()}>\n          Randomise Array\n        </button>\n      </div>\n      <div className=\"array__container\">\n        <div className=\"bars__background\">\n          {array.map((element, id) => (\n            <div\n              onMouseMove={e => handleDraw(e, id)}\n              key={id}\n              style={{ height: \"100%\" }}\n            ></div>\n          ))}\n        </div>\n        <div className=\"bars\">\n          {array.map((element, id) => {\n            if ( colorArray[ id ]¬†){\n              return <div key={id} style={{ height: `${element}%`, background: colorArray[ id ] }}></div>\n            } else {\n              return <div key={id} style={{ height: `${element}%` }}></div>\n            }\n          }\n          )}\n        </div>\n      </div>\n      <div className=\"controls\">\n        <button\n          className=\"button-primary\"\n          onClick={() => bubbleSort(array, setArray, setColorArray)}\n        >\n          Bubble Sort\n        </button>\n        <button\n          className=\"button-primary\"\n          onClick={() => insertionSort([...array], setArray, setColorArray)}\n        >\n          Insertion Sort\n        </button>\n        <button\n          className=\"button-primary\"\n          onClick={() => quickSort([...array], 0, array.length - 1, setArray, setColorArray)}\n        >\n          Quick Sort\n        </button>\n      </div>\n      <div className=\"instructions\">\n        <div className=\"row\">\n          <span>‚úèÔ∏è</span><span>Draw on the array grid with your mouse or click 'Random Array' for a randomised array.</span>\n        </div>\n        <div className=\"row\">\n          <span>üìà</span><span>Click the different sorting algorithms to visualise the array being sorted!</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default function bubbleSort(array, setArray, setColorArray) {\n    let complete;\n    const arrayLength = array.length;\n\n    function bubblePass() {\n      complete = false;\n\n      setInterval(() => {\n        if ( !complete ){\n          for (let i = 0; i < arrayLength; i += 1) {\n            complete = true\n            setTimeout(() => {\n              if (array[i] > array[i + 1]) {\n                let tmpColorArray = Array(100)\n                tmpColorArray[i] = \"green\"\n                setColorArray(tmpColorArray)\n\n                let tmp = array[i];\n                let mutatedArray = array;\n                mutatedArray[i] = array[i + 1];\n                mutatedArray[i + 1] = tmp;\n                complete = false;\n                setArray([...mutatedArray]);\n              } else {\n                let tmpColorArray = Array(100)\n                tmpColorArray[i] = \"red\"\n                setColorArray(tmpColorArray)\n              }\n            }, i );\n          }\n        } else {\n          clearInterval()\n          return;\n        }\n      }, arrayLength  )\n    }\n\n    bubblePass();\n  }\n\n","export default function insertionSort(arr, setArray, setColorArray) { \n    let length = arr.length;\n    let arrayAnimation = [];\n    let colorArrayAnimations = [];\n    \n    for (let i = 1; i < length; i++) {\n        let key = arr[i];\n        let j = i - 1;\n\n            while ( j >= 0 && arr[j] > key ) {\n              arr[j + 1] = arr[j];\n              j = j - 1;\n              arrayAnimation.push([...arr])\n              let tmpColorArray = Array(100)\n              tmpColorArray[ j + 1 ] = \"green\"\n              colorArrayAnimations.push( [...tmpColorArray] )\n            }\n            arr[j + 1] = key;\n\n\n    }\n    for ( let i = 0; i < arrayAnimation.length; i += 1 ) {\n      setTimeout(() => {\n        setArray( [...arrayAnimation[i]] )\n        setColorArray( [...colorArrayAnimations[i]] )\n      },  )\n    }\n};","export default function quickSort(arr, left, right, setArray, setColorArray) {\n  \n  function partition(arr, pivot, left, right) {\n    let pivotValue = arr[pivot];\n    let partitionIndex = left;\n\n    for (var i = left; i < right; i++) {\n      if (arr[i] < pivotValue) {\n        swap(arr, i, partitionIndex);\n        partitionIndex++;\n      }\n    }\n\n    swap(arr, right, partitionIndex);\n\n    return partitionIndex;\n  }\n\n  function swap(arr, i, j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    setArray([...arr]);\n  }\n\n  \n  let len = arr.length;\n  let pivot;\n  let partitionIndex;\n  if (left < right) {\n    pivot = right;\n    let tmpColorArray = Array(100)\n    tmpColorArray[ pivot ] = \"red\";\n    tmpColorArray[ left ] = \"blue\";\n    for ( let i = left; i < pivot; i += 1 ) {\n      tmpColorArray[ i ] = \"blue\";\n    }\n    setColorArray( [...tmpColorArray] );\n\n    partitionIndex = partition(arr, pivot, left, right);\n\n    setTimeout(() => {\n      quickSort(arr, left, partitionIndex - 1, setArray, setColorArray);\n    }, 200);\n    setTimeout(() => {\n      quickSort(arr, partitionIndex + 1, right, setArray, setColorArray);\n    }, 250);\n  }\n  return arr;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}